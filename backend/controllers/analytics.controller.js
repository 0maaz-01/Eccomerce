import Order from "../models/order.model.js";
import Product from "../models/product.model.js";
import User from "../models/user.model.js";




export const getAnalyticsData = async () => {
    // to count the total number of users so here we are counting the number of documents present in User module
	const totalUsers = await User.countDocuments();

    // to count the total number of products so here we are counting the number of documents present in Products module
    const totalProducts = await Product.countDocuments();

	const salesData = await Order.aggregate([
		{
			$group: {
				_id: null,                  // it groups all documents together,
				totalSales: { $sum: 1 },    // total number of products sold.
				totalRevenue: { $sum: "$totalAmount" },    // total revenue generated by all the products sold.
			},
		},
	]);

    // setting up the total sales and total revenues and if these are undefined we will keep 0 in both as their initial values.
	const { totalSales, totalRevenue } = salesData[0] || { totalSales: 0, totalRevenue: 0 };

	return {
		users: totalUsers,
		products: totalProducts,
		totalSales,
		totalRevenue,
	};
};




export const getDailySalesData = async (startDate, endDate) => {
	try {
        // The Aggregation Framework in MongoDB provides a set of operators to perform operations like grouping, sorting, filtering, projecting, and more. 
		const dailySalesData = await Order.aggregate([
			{   
                // to get all the orders that we recieved within last 7 working days.
				$match: {
					createdAt: {
						$gte: startDate,
						$lte: endDate,
					},
				},
			},
			{
				$group: {
					_id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
					sales: { $sum: 1 },
					revenue: { $sum: "$totalAmount" },
				},
			},
			{ $sort: { _id: 1 } },
		]);



		const dateArray = getDatesInRange(startDate, endDate);

		return dateArray.map((date) => {
            // to display the data of different days individually.
			const foundData = dailySalesData.find((item) => item._id === date);

			return {
				date,
				sales: foundData?.sales || 0,
				revenue: foundData?.revenue || 0,
			};
		});
	} 
    
    catch (error) {
		throw error;
	}
};




function getDatesInRange(startDate, endDate) {
	const dates = [];
	let currentDate = new Date(startDate);

    // to add the different dates for the last seven days in the dates array.
	while (currentDate <= endDate) {
		dates.push(currentDate.toISOString().split("T")[0]);
		currentDate.setDate(currentDate.getDate() + 1);
	}

	return dates;
}
